Hello - from /Users/elizabethhoward/.vscode/extensions/jaredly.reason-vscode-1.7.5/bin.native
Previous log location: /var/folders/1k/19j9pyn12j1_y8qtn5wgrmx00000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/dumper.ml","languageId":"ocaml","version":1,"text":"(* $Id: dumper.ml,v 1.16 2020-01-24 14:55:58-08 - - $ *)\n\nlet quote string =\n    let regex = Str.regexp \"\\\"\"\n    and subst _ = \"\\\\\\\"\"\n    in  \"\\\"\" ^ Str.global_substitute regex subst string ^ \"\\\"\"\n\nlet join start sep stop list =\n    let rec join' list' = match list' with\n        | [] -> stop\n        | [unit] -> unit ^ stop\n        | head::tail -> head ^ sep ^ \" \" ^ join' tail\n    in match list with\n        | [] -> start ^ stop\n        | _::_ -> start ^ join' list\n\nlet string_of_option str_fn item = match item with\n    | None -> \"None\"\n    | Some thing -> \"Some (\" ^ str_fn thing ^ \")\"\n\nlet string_of_ctor ctor args =\n    join (ctor ^ \" (\") \",\" \")\" args\n\nlet string_of_list str_fn list =\n    join \"[\" \";\" \"]\" (List.map str_fn list)\n\nlet rec string_of_printable printable = match printable with\n    | Absyn.Printexpr expr ->\n          string_of_ctor \"Printexpr\" [string_of_expr expr]\n    | Absyn.String string ->\n          string_of_ctor \"String\" [quote string]\n\nand string_of_memref memref = match memref with\n    | Absyn.Arrayref (ident, expr) ->\n          string_of_ctor \"Arrayref\" [quote ident; string_of_expr expr]\n    | Absyn.Variable ident -> string_of_ctor \"Variable\" [quote ident]\n\nand string_of_expr expr = match expr with\n    | Absyn.Number number ->\n          string_of_ctor \"Number\" [string_of_float number]\n    | Absyn.Memref memref ->\n          string_of_ctor \"Memref\" [string_of_memref memref]\n    | Absyn.Unary (oper, expr) ->\n          string_of_ctor \"Unary\" [quote oper; string_of_expr expr]\n    | Absyn.Binary (oper, expr1, expr2) ->\n          string_of_ctor \"Binary\"\n              [quote oper; string_of_expr expr1; string_of_expr expr2]\n\n\f\nlet string_of_stmt (stmt: Absyn.stmt) = match stmt with\n    | Absyn.Dim (ident, expr) ->\n          string_of_ctor \"Dim\"\n              [quote ident ^ \", \" ^ string_of_expr expr]\n    | Absyn.Let (memref, expr) ->\n          string_of_ctor \"Let\"\n              [string_of_memref memref; string_of_expr expr]\n    | Absyn.Goto label ->\n          string_of_ctor \"Goto\" [quote label]\n    | Absyn.If (expr, label) ->\n          string_of_ctor \"If\" [string_of_expr expr; quote label]\n    | Absyn.Print printable'list ->\n          string_of_ctor \"Print\"\n              [string_of_list string_of_printable printable'list]\n    | Absyn.Input memref'list ->\n          string_of_ctor \"Input\"\n              [string_of_list string_of_memref memref'list]\n\nlet dump_progline (linenr, label'option, stmt'option) =\n    Printf.fprintf stderr \"program: %d %s: %s\\n%!\" linenr\n        (string_of_option quote label'option)\n        (string_of_option string_of_stmt stmt'option)\n\nlet dump_program (program : Absyn.program) =\n    List.iter dump_progline program"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/dumper.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0112056732178ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/dumper.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/interp.ml","languageId":"ocaml","version":1,"text":"(* $Id: interp.ml,v 1.8 2020-01-24 11:42:24-08 - - $ *)\n\nopen Absyn\n\nexception Unimplemented of string\nlet no_expr reason = raise (Unimplemented reason)\nlet no_stmt reason continuation = raise (Unimplemented reason)\n\nlet want_dump = ref false\n\nlet rec eval_expr (expr : Absyn.expr) : float = match expr with\n    | Number number -> number\n    | Memref memref -> no_expr \"eval_expr Memref\"\n    | Unary (oper, expr) -> no_expr \"eval_expr Unary\"\n    | Binary (oper, expr1, expr2) -> no_expr \"eval_expr Binary\"\n\nlet rec interpret (program : Absyn.program) = match program with\n    | [] -> ()\n    | firstline::continuation -> match firstline with\n      | _, _, None -> interpret continuation\n      | _, _, Some stmt -> (interp_stmt stmt continuation)\n\nand interp_stmt (stmt : Absyn.stmt) (continuation : Absyn.program) =\n    match stmt with\n    | Dim (ident, expr) -> no_stmt \"Dim (ident, expr)\" continuation\n    | Let (memref, expr) -> no_stmt \"Let (memref, expr)\" continuation\n    | Goto label -> no_stmt \"Goto label\" continuation\n    | If (expr, label) -> no_stmt \"If (expr, label)\" continuation\n    | Print print_list -> interp_print print_list continuation\n    | Input memref_list -> interp_input memref_list continuation\n\nand interp_print (print_list : Absyn.printable list)\n                 (continuation : Absyn.program) =\n    let print_item item =\n        (print_string \" \";\n         match item with\n         | String string ->\n           let regex = Str.regexp \"\\\"\\\\(.*\\\\)\\\"\"\n           in print_string (Str.replace_first regex \"\\\\1\" string)\n         | Printexpr expr ->\n           print_float (eval_expr expr))\n    in (List.iter print_item print_list; print_newline ());\n    interpret continuation\n\nand interp_input (memref_list : Absyn.memref list)\n                 (continuation : Absyn.program)  =\n    let input_number memref =\n        try  let number = Etc.read_number ()\n             in (print_float number; print_newline ())\n        with End_of_file -> \n             (print_string \"End_of_file\"; print_newline ())\n    in List.iter input_number memref_list;\n    interpret continuation\n\nlet interpret_program program =\n    (Tables.init_label_table program; \n     if !want_dump then Tables.dump_label_table ();\n     if !want_dump then Dumper.dump_program program;\n     interpret program)\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/interp.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/interp.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/elizabethhoward/Documents/GitHub/asgn2-CSE112/interp.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":6,"method":"shutdown","params":null}
Sending response {"id": 6, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
